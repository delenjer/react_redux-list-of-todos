{"version":3,"sources":["User/User.tsx","Todoitem/Todoitem.tsx","const/const.ts","Todolist/Todolist.tsx","api/api.ts","Todos/Todos.tsx","store.ts","App.tsx","index.tsx"],"names":["User","user","name","Todoitem","connect","state","todos","dispatch","removeTodo","id","type","value","todo","title","completed","className","onClick","TodoList","map","key","API_URL","Todos","setTodos","useState","isLoading","setLoading","showTodos","a","Promise","all","fetch","then","response","json","todosFromServer","users","preparedTodos","find","person","userId","filter","typeOfFilter","sort","b","localeCompare","toString","length","disabled","initialState","store","createStore","action","item","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a7799d6.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { Users } from '../interfaces';\n\ninterface Props {\n  user: Users;\n}\n\nexport const User: FC<Props> = ({ user }) => <>{user.name}</>;\n","import React, { FC } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { User } from '../User/User';\nimport { TodoWithUsers, State } from '../interfaces';\nimport { REMOVE_TODO } from '../const/const';\n\ninterface Props {\n  todo: TodoWithUsers;\n  removeTodo: (id: number) => void;\n}\n\nconst TodoTemplate: FC<Props> = ({ todo, removeTodo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <>\n      <tr>\n        <td>{id}</td>\n        <td>{title}</td>\n        <td className=\"state\">{completed ? 'ready' : 'not ready'}</td>\n        <td><User user={user} /></td>\n        <button\n          type=\"button\"\n          className=\"remove-button\"\n          onClick={() => removeTodo(id)}\n        >\n          x\n        </button>\n      </tr>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  todos: state.todos,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  removeTodo: (id: number) => dispatch({\n    type: REMOVE_TODO,\n    value: id,\n  }),\n});\n\nexport const Todoitem = connect(mapStateToProps, mapDispatchToProps)(TodoTemplate);\n","export const SET_TODOS = 'SET_TODOS';\nexport const REMOVE_TODO = 'REMOVE_TODO';\n","import React, { FC } from 'react';\nimport { Todoitem } from '../Todoitem/Todoitem';\nimport { TodoWithUsers } from '../interfaces';\n\ninterface Props {\n  todos: TodoWithUsers[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <table className=\"container\">\n      <thead>\n        <tr>\n          <th>id</th>\n          <th>title</th>\n          <th>status</th>\n          <th>user</th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map(todo => (\n          <Todoitem key={todo.id} todo={todo} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Todo, Users } from '../interfaces';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport const getUsers = (): Promise<Users[]> => {\n  return fetch(`${API_URL}/users`)\n    .then(response => response.json());\n};\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n};\n","import React, { FC, useState } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { TodoList } from '../Todolist/Todolist';\nimport { Users, TodoWithUsers, State } from '../interfaces';\nimport { getUsers, getTodos } from '../api/api';\nimport { SET_TODOS } from '../const/const';\n\ninterface Actions {\n  setTodos: (todos: TodoWithUsers[]) => void;\n}\n\ntype Props = State & Actions;\n\nconst TodosTemplate: FC<Props> = ({ todos, setTodos }) => {\n  const [isLoading, setLoading] = useState(false);\n\n\n  const showTodos = async () => {\n    setLoading(true);\n\n    const [todosFromServer, users] = await Promise.all(\n      [getTodos(), getUsers()],\n    );\n\n    const preparedTodos = todosFromServer.map((todo) => {\n      const user = users.find((person) => person.id === todo.userId) as Users;\n\n      return {\n        ...todo,\n        user,\n      };\n    });\n\n    setTodos(preparedTodos);\n    setLoading(false);\n  };\n\n  const filter = (typeOfFilter: string) => {\n    switch (typeOfFilter) {\n      case 'sortByTitle':\n        setTodos([...todos]\n          .sort((a, b) => a.title.localeCompare(b.title)));\n        break;\n      case 'sortByName':\n        setTodos([...todos]\n          .sort((a, b) => a.user.name.localeCompare(b.user.name)));\n        break;\n      case 'sortByCompleted':\n        setTodos([...todos]\n          .sort((a, b) => b.completed.toString()\n            .localeCompare(a.completed.toString())));\n        break;\n      default:\n    }\n  };\n\n  if (!todos.length) {\n    return (\n      <button\n        className=\"start-button\"\n        type=\"button\"\n        onClick={showTodos}\n        disabled={isLoading}\n      >\n        {isLoading ? 'Loading...' : 'Start Load'}\n      </button>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Static list of todos</h1>\n      <div className=\"buttons\">\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => filter('sortByTitle')}\n        >\n          Sort by title\n        </button>\n        <button\n          className=\" button\"\n          type=\"button\"\n          onClick={() => filter('sortByName')}\n        >\n          Sort by name\n        </button>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => filter('sortByCompleted')}\n        >\n          Sort by completed\n        </button>\n      </div>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  todos: state.todos,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setTodos: (todos: TodoWithUsers[]) => dispatch({\n    type: SET_TODOS,\n    value: todos,\n  }),\n});\n\nexport const Todos = connect(mapStateToProps, mapDispatchToProps)(TodosTemplate);\n","import { createStore, AnyAction } from 'redux';\nimport { State } from './interfaces';\nimport { SET_TODOS, REMOVE_TODO } from './const/const';\n\nconst initialState: State = {\n  todos: [],\n};\n\nfunction reducer(state: State = initialState, action: AnyAction) {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.value,\n      };\n\n    case REMOVE_TODO:\n      return {\n        ...state,\n        todos: [...state.todos].filter(item => item.id !== action.value),\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(reducer, initialState);\n","import React, { FC } from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport { Todos } from './Todos/Todos';\nimport { store } from './store';\n\nconst App: FC = () => (\n  <Provider store={store}>\n    <Todos />\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}